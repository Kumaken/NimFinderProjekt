{"version":3,"sources":["logo.svg","Components/BaseHeaderModel.js","Components/BaseFooterModel.js","Components/BaseHomeModel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BaseHeaderModel","react_default","a","createElement","className","React","Component","BaseFooterModel","BaseHomeModel","console","log","this","props","browserName","dateInfo","toString","browserHandler","chrome","googlebot","default","browser","concat","BrowserIdentification","lib_default","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loading","data","_this2","setState","fetch","then","response","json","response2","date","Date","Components_BaseHeaderModel","Components_BaseHomeModel","App_BrowserIdentification","Components_BaseFooterModel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gOCgBzBC,0LATP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,sCAJcE,IAAMC,YCWrBC,mLATP,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0FALcE,IAAMC,WCkBrBE,mLAdP,OAFAC,QAAQC,IAAIC,KAAKC,MAAMC,aACvBJ,QAAQC,IAAIC,KAAKC,MAAME,UAEnBb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uCAA+BQ,KAAKC,MAAMC,YAA1C,KACAZ,EAAAC,EAAAC,cAAA,kDAAyCF,EAAAC,EAAAC,cAAA,UAAKQ,KAAKC,MAAME,SAASC,aAClEd,EAAAC,EAAAC,cAAA,6EAEAF,EAAAC,EAAAC,cAAA,uDAVYE,IAAMC,WC4C5BU,EAAiB,CACrBC,OAAQ,iBAAM,yBACdC,UAAW,iBAAM,cACjBC,QAAS,SAACC,GAAD,SAAAC,OAAeD,EAAf,OAGLE,mLAEF,OACErB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,KACIc,UAJ0BX,IAAMC,WAoD3BkB,cArCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,QACKoB,MAAQ,CACXC,SAAS,EACTC,KAAM,IAJGR,mFASO,IAAAS,EAAAvB,KAClBA,KAAKwB,SAAS,CAACH,SAAS,IAGxBI,MAAM,sDACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAJ,GAASxB,QAAQC,IAAIuB,KAC1BI,KAAK,SAAAG,GACFN,EAAKC,SAAS,CACZF,KAAMO,uCAMZ,IAAMC,EAAO,IAAIC,KAEjB,OACEzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,CAAe/B,YAAaZ,EAAAC,EAAAC,cAAC0C,EAAD,MAA2B/B,SAAU2B,IACjExC,EAAAC,EAAAC,cAAC2C,EAAD,cAhCUzC,IAAMC,WCvDJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACLpD,EAAAC,EAAAC,cAACmD,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.858f46e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//Basic Dependency:\r\nimport React from \"react\";\r\nimport Styles from './../Styles/Style.css'; //import is needed for the styling to work\r\n\r\n//Class Components:\r\nclass BaseHeaderModel extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className='navbar'>\r\n                <h1>NimFinderProjekt</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//expose this .js file so it can be imported by other modules:\r\nexport default BaseHeaderModel","//Basic Dependency:\r\nimport React from \"react\";\r\n\r\n//Class Components:\r\nclass BaseFooterModel extends React.Component{\r\n    //main render method:\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h3>NimFinderProjekt created by Abel Stanley @2019, All rights reserved.</h3>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\n//expose this .js file so it can be imported by other modules:\r\nexport default BaseFooterModel","//Basic Dependency:\r\nimport React from \"react\";\r\n\r\n//Class Components:\r\nclass BaseHomeModel extends React.Component{\r\n    render(){\r\n        console.log(this.props.browserName);\r\n        console.log(this.props.dateInfo);\r\n        return(\r\n            <div>\r\n                <h1>Welcome to our NIM Finder,{this.props.browserName} </h1>\r\n                <h2>You are very lucky to visit today on <h1>{this.props.dateInfo.toString()}</h1></h2>\r\n                <h3>it's simple, but does the job just fine, so don't complain pls.</h3>\r\n    \r\n                <p>Enter necessary search parameters:</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//expose this .js file so it can be imported by other modules:\r\nexport default BaseHomeModel","import React from 'react'; //if import {Component} you don't have to extend React.Component, only Component \nimport logo from './logo.svg';\nimport './App.css';\n\n//miscellaneous dependencies:\nimport BrowserDetection from 'react-browser-detection';\n\n//Import components:\nimport BaseHeaderModel from './Components/BaseHeaderModel';\nimport BaseFooterModel from './Components/BaseFooterModel';\nimport BaseHomeModel from './Components/BaseHomeModel';\n\n//Default App:\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\n/*\n//Render function\nfunction RenderApp(){\n  return (\n    <div>\n      <BaseHeaderModel />\n      <BaseHomeModel />\n      <BaseFooterModel />\n    </div>\n  )\n}*/\n\n\nconst browserHandler = {\n  chrome: () => \"fellow chrome user...\",\n  googlebot: () => \"GoogleBot!\",\n  default: (browser) =>`${browser}!`\n};\n \nclass BrowserIdentification extends React.Component {\n  render() {\n    return (\n      <BrowserDetection>\n        { browserHandler }\n      </BrowserDetection>\n    );\n  }\n}\n\n\n\n//Class based components of App:\nclass App extends React.Component {\n  //State constructor: (State is mutable while Props are immutable)\n  constructor(){\n    super();\n    this.state = {\n      loading: false,\n      data: {} //empty container for json\n    }\n  }\n\n  //When this component is first mounted: (Only runs once)\n  componentDidMount() {\n    this.setState({loading: true})\n    //fetch the data as response\n    //get response then turn into json format\n    fetch('https://api.stya.net/nim/byname?name=Jason&count=2')\n    .then(response => response.json())\n    .then(data => {console.log(data)})\n    .then(response2 => {\n        this.setState({\n          data: response2\n        })\n      })\n  }\n  //Main render method:\n  render() {\n    const date = new Date();\n    \n    return (\n      <div>\n        <BaseHeaderModel />\n        <BaseHomeModel browserName={<BrowserIdentification />} dateInfo={date} />\n        <BaseFooterModel />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}